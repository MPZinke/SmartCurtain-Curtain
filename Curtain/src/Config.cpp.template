
/***********************************************************************************************************************
*                                                                                                                      *
*   created by: MPZinke                                                                                                *
*   on 2021.12.19                                                                                                      *
*                                                                                                                      *
*   DESCRIPTION: TEMPLATE                                                                                              *
*   BUGS:                                                                                                              *
*   FUTURE:                                                                                                            *
*                                                                                                                      *
***********************************************************************************************************************/


#include "../Headers/Config.hpp"


namespace Config
{
	namespace Curtain
	{
		const char CURTAIN_ID[/* >=(24+1) */] = "1234567890abcdef12345678";  // Size commented to allow static assert
		static_assert(sizeof(CURTAIN_ID) >= (24+1), "BSON ObjectID's must be exactly 24 characters.");

		const uint32_t IGNORE_MOVEMENT_SIMILARITY = 10;  // max step difference to ignore event
		const uint32_t POSITION_TOLLERANCE = 5;  // steps within ends to consider "close enough"
		const uint32_t STEPS_FOR_CALIBRATION = 5;  // how picky the program should be to commence recalibration
	}


	namespace Hardware
	{
		// ——————————————————————————————————————— HARDWARE DICTATING  VALUES ——————————————————————————————————————— //
		// —————————————————————————————————————————————————————————————————————————————————————————————————————————— //

		// ———————————————————————————————————— HARDWARE DICTATING  VALUES::PINS ———————————————————————————————————— //
		const uint8_t DIRECTION_PIN = 5;
		const uint8_t ENABLE_PIN = 18;
		const uint8_t PULSE_PIN = 19;

		const uint8_t CLOSE_PIN = 21;

		// ———————————————————————————————————— HARDWARE DICTATING  VALUES::PINS ———————————————————————————————————— //
		const uint16_t PULSE_WAIT = 60;  // Wait between pulses for the stepper motor

		// ——————————————————————————————————————— HARDWARE DETERMINED VALUES ——————————————————————————————————————— //
		// —————————————————————————————————————————————————————————————————————————————————————————————————————————— //

		// ————————————————————————————————————— PHYSICAL HARDWARE BASED VALUES ————————————————————————————————————— //
		// These are determined by the hardware, as opposed to the hardware functionality being determined by these.  //
		// —————————————————————————————————————————————————————————————————————————————————————————————————————————— //
		const uint32_t MAX_LENGTH = 34000;

		// ———————————————————————————————— PHYSICAL HARDWARE BASED VALUES::SWITCHES ———————————————————————————————— //
		const bool DIRECTION_SWITCH = false;  // Used to make OPEN == ON and CLOSE == OFF.
		const bool SWITCH = true;  // true = LOW is ON or false = HIGH is ON (depends on electronic current directions)
	}

	namespace Network
	{
		namespace MQTT
		{
			const char BROKER_DOMAIN[/* >=(1+1) */] = "";
			static_assert(sizeof(BROKER_DOMAIN) >= (1+1), "A valid MQTT broker must be specified");
			const char USERNAME[] = "";
			const char PASSWORD[] = "";
			const uint16_t PORT = 1883;
		}

		namespace Device
		{
			const uint8_t MAC_ADDRESS[6] = {0xDE, 0x43, 0x52, 0x54, 0x4E, 0x31};  // {'Z', 'C', 'R', 'T', 'N', '1'}
		}

		namespace WiFi
		{
			const char PASSWORD[/* >=(8+1) */] = "";
			const char SSID[/* >=(1+1) */] = "";
			static_assert(sizeof(PASSWORD) >= (8 + 1), "Valid WiFi PASSWORD's are at least 8 characters.");
			static_assert(sizeof(SSID) >= (1 + 1), "Valid WiFi SSID's are at least 1 character.");
		}
	}  // end namespace Config::Network
}  // end namespace Configure